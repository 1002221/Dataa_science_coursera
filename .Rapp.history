length(temp)
mydata[,1]
mydata
temp
(mydata[,1])[temp]
length((mydata[,1])[temp])
mean()
mean((mydata[,1])[!temp])
temp<-mydata[(mydata[,1])>31)]
temp<-mydata[(mydata[,1])>31]
temp<-mydata[(mydata[,1])>31,]
temp
length(mydata)
NA.36    NA      NA   NA   NA    NA  NA#
> lapply(1:length(mydata), function(x) mydata[mydata[x,1] > 31,x])
NA.36    NA      NA   NA   NA    NA  NA#
> lapply(1:length(mydata), function(x) mydata[mydata[[x]][[1]] > 31,x])
mydata[(mydata[,1]>31),]
mydata[(mydata[,1]>31 & mydata[,4]>90),]
is.na(mydata[(mydata[,1]>31 & mydata[,4]>90),]#
)
(mydata[(mydata[,1]>31 & mydata[,4]>90),])[!is.na(mydata[(mydata[,1]>31 & mydata[,4]>90),]#
]
(mydata[(mydata[,1]>31 & mydata[,4]>90),])[!is.na(mydata[(mydata[,1]>31 & mydata[,4]>90),]]
(mydata[(mydata[,1]>31 & mydata[,4]>90),])[!is.na(mydata[(mydata[,1]>31 & mydata[,4]>90),]
]
(mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2]
mean((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])
is.na((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])
((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])[!is.na((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])]
mean(((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])[!is.na((mydata[(mydata[,1]>31 & mydata[,4]>90),])[,2])])
mydata[mydata[,5]==6]
mydata[(mydata[,5])==6]
mydata[(mydata[,5]==6),]
mean(mydata[(mydata[,5]==6),])
mean(mydata[(mydata[,5]==6),])[,4]
mydata[(mydata[,5]==6),][,4]
mean(mydata[(mydata[,5]==6),][,4])
mean(mydata[(mydata[,5]==5),])
mydata[(mydata[,5]==5),]
mydata[(mydata[,5]==5),][,1]
is.na(mydata[(mydata[,5]==5),][,1])
mydata[(mydata[,5]==5),][,1][! is.na(mydata[(mydata[,5]==5),][,1])]
max(mydata[(mydata[,5]==5),][,1][! is.na(mydata[(mydata[,5]==5),][,1])])
x<-4
class(x)
x<-c(4,"a",TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
x<-1:4
y<-2
x+y
y<-1:2
x+y
clear
rm(list=ls())
cat("\014")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
testdir<-dir.create()
dir.create()
testdir<-dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R)
file.create("mytest.R")
file.create("mytest.R")
list()
list.files()
file.exists("mytest.R")
info("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path(dir.create("testdir")),recursive TRUE, "testdir2")
dir.create(file.path(dir.create("testdir")),recursive = TRUE, "testdir2")
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
library(kernlab)
install(kernlab)
install.packages('caret', dependencies = TRUE)
library(kernlab)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=.5)
my_seq<-seq(5,10,length=30)
lengh(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rec(c(0,1,2), times = 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
myvar<-num_vect>= 6
num_vect>= 6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char,"Marco")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep =" ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS,1:4,sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data_)
class(my_data)
cnames = c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
?colnames
colnames(my_data)<-cnames
my_data
?train
library(caret); library(kernlab); data(spam)
inTrain<-createDataPartition(y=spam$type,p=0,75,list=FALSE)
inTrain(1:2)
inTrain[1:2]
spam[1:10]
spam[1:10][1:10]
spam[1:10,1:10]
spam[1:20,1:3]
spam[1:3,1:20]
colnames(spam)
spam$type[1:3]
spam[1:3,type]
spam[1:3,"type"]
spam["type",1:3]
spa,[,"type"][1:3]
spam[,"type"][1:3]
(spam[,"type"])[1:3]
spam[,"type"]
(spam[,"type"])[1:5]
inTrain<-createDataPartition(y=spam$type,p=0,75,list=FALSE)
?inTrain
?createDataPartition
spam$type
spam$type[1:5]
?folds
?createFolds
set.seed(32323)
folds<-createFolder(y=spam$type[1:10],k=2,list=TRUE,returnTrain=TRUE)
folds<-createFolds(y=spam$type[1:10],k=2,list=TRUE,returnTrain=TRUE)
folds
folds<-createFolds(y=spam$type[1:10],k=2,list=TRUE)
folds
createFolds(y=spam$type[1:10],k=2,list=TRUE)
createFolds(y=spam$type[1:10],k=2,list=TRUE,returnTrain=TRUE)
createFolds(y=spam$type[1:10],k=2,list=TRUE,returnTrain=0)
createFolds(y=spam$type[1:10],k=2,list=TRUE,returnTrain=FALSE)
createFolds(y=spam$type[1:10],k=5,list=TRUE,returnTrain=FALSE)
createFolds(y=spam$type[1:10],k=5,list=TRUE,returnTrain=TRUE)
createFolds(y=spam$type[1:20],k=5,list=TRUE,returnTrain=TRUE)
createFolds(y=spam$type[1:20],k=5,list=TRUE,returnTrain=FALSE)
createFolds(y=spam$type[1:20],k=5,list=TRUE)
library(ISLR);
install(ISLR)
install.packages('ISLR')
library(ISLR);
